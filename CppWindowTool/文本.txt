
/*
* 函数 gdiGuiPrinter()
* 掌管所有的屏幕绘制工作。主要由WM_PAINT驱动。
*/
void gdiGuiPrinter() {
	GetGuiRect();
	int WindowWidth = GuiRectangle_Present.right;// 为了适配GuiRect，以后请用GuiRect
	int WindowHeight = GuiRectangle_Present.bottom;// 为了适配GuiRect，以后请用GuiRect

	GuiDisplay_Prev = GuiDisplay;

	// 初始化绘图
	PAINTSTRUCT ps;
	PrevhDC = BeginPaint(MainhWnd, &ps);
	if (GuiDisplay == EK_GUI_BLACK /*黑屏界面*/) {
		HRGN rgnBLACK = CreateRectRgn(
			0, 0,
			(int)(WindowWidth),
			(int)(WindowHeight));
		HBRUSH brushB = CreateSolidBrush(RGB(0, 0, 0));
		SelectObject(PrevhDC, brushB);
		FillRgn(PrevhDC, rgnBLACK, brushB);
		DeleteObject(brushB);
	}
	else {
		// 背景
		gdiSetBackgroundPic();
		// 分态
		if (GuiDisplay == EK_GUI_STARTER /*开始界面*/) {
			HRGN rgn11 = CreateRoundRectRgn(
				(int)(WindowWidth * 2 / 30),
				(int)(WindowHeight * 7 / 10),
				(int)(WindowWidth * 10 / 30),
				(int)(WindowHeight * 9 / 10),
				(int)(min(WindowWidth, WindowHeight) / 20),
				(int)(min(WindowWidth, WindowHeight) / 20));
			HRGN rgn12 = CreateRoundRectRgn(
				(int)(WindowWidth * 11 / 30),
				(int)(WindowHeight * 7 / 10),
				(int)(WindowWidth * 19 / 30),
				(int)(WindowHeight * 9 / 10),
				(int)(min(WindowWidth, WindowHeight) / 20),
				(int)(min(WindowWidth, WindowHeight) / 20));
			HRGN rgn13 = CreateRoundRectRgn(
				(int)(WindowWidth * 20 / 30),
				(int)(WindowHeight * 7 / 10),
				(int)(WindowWidth * 28 / 30),
				(int)(WindowHeight * 9 / 10),
				(int)(min(WindowWidth, WindowHeight) / 20),
				(int)(min(WindowWidth, WindowHeight) / 20));
			HPEN pen = CreatePen(PS_SOLID, 0, RGB(255, 255, 255));
			HBRUSH brush = CreateSolidBrush(RGB(255, 255, 255));
			SelectObject(PrevhDC, brush);
			FillRgn(PrevhDC, rgn11, brush);
			FillRgn(PrevhDC, rgn12, brush);
			FillRgn(PrevhDC, rgn13, brush);
			DeleteObject(pen);
			DeleteObject(brush);
			//按钮定义
			/*
			DestroyWindow(GuiButtons.__STARTER.Home);
			GuiButtons.__STARTER.Home = CreateWindow(
				L"button",
				L"Home",
				WS_CHILD | BS_PUSHBUTTON | WS_VISIBLE | BS_FLAT | BS_NOTIFY | BS_MULTILINE,
				(int)(WindowWidth * 11 / 30),
				(int)(WindowHeight / 2),
				(int)(WindowWidth * 8 / 30),
				(int)(WindowHeight * 1 / 4),
				MainhWnd,
				NULL,
				NULL,
				NULL);
			DestroyWindow(GuiButtons.__STARTER.Normal);
			GuiButtons.__STARTER.Normal = CreateWindow(
				L"button",
				L"Normal",
				WS_CHILD | BS_PUSHBUTTON | WS_VISIBLE | BS_FLAT | BS_NOTIFY | BS_MULTILINE,
				(int)(WindowWidth * 2 / 30),
				(int)(WindowHeight / 2),
				(int)(WindowWidth * 8 / 30),
				(int)(WindowHeight * 1 / 4),
				MainhWnd,
				NULL,
				NULL,
				NULL);
			ShowWindow(GuiButtons.__STARTER.Home, SW_NORMAL);
			UpdateWindow(GuiButtons.__STARTER.Home);
			ShowWindow(GuiButtons.__STARTER.Normal, SW_NORMAL);
			UpdateWindow(GuiButtons.__STARTER.Normal);
			*/
			//
		}
		else if (GuiDisplay == EK_GUI_WINDOW /*窗口界面*/) {
			HRGN rgnBackToStarter = CreateRoundRectRgn(
				0,
				0,
				(int)(WindowWidth * 1 / 10),
				(int)(WindowHeight * 1 / 20),
				(int)(min(WindowWidth, WindowHeight) / 100),
				(int)(min(WindowWidth, WindowHeight) / 100));
			HBRUSH brush = CreateSolidBrush(RGB(255, 255, 255));
			FillRgn(PrevhDC, rgnBackToStarter, brush);
			DeleteObject(brush);
			/*DestroyWindow(GuiButtons.__WINDOW.BACKtoSTART);
			GuiButtons.__WINDOW.BACKtoSTART = CreateWindow(
				L"button",
				L"Back To Starter",
				WS_CHILD | BS_PUSHBUTTON | WS_VISIBLE | BS_FLAT | BS_NOTIFY | BS_MULTILINE,
				0,
				0,
				(int)(WindowWidth * 1 / 10),
				(int)(WindowHeight * 1 / 20),
				MainhWnd,
				NULL,
				NULL,
				NULL);
			ShowWindow(GuiButtons.__WINDOW.BACKtoSTART, SW_NORMAL);
			UpdateWindow(GuiButtons.__WINDOW.BACKtoSTART);
			*/
			}
		else if (GuiDisplay == EK_GUI_HOME /*家的界面*/) {
			HRGN rgnBackToStarter = CreateRoundRectRgn(
				0,
				0,
				(int)(WindowWidth * 1 / 10),
				(int)(WindowHeight * 1 / 20),
				(int)(min(WindowWidth, WindowHeight) / 100),
				(int)(min(WindowWidth, WindowHeight) / 100));
			HBRUSH brush = CreateSolidBrush(RGB(255, 255, 255));
			FillRgn(PrevhDC, rgnBackToStarter, brush);
			DeleteObject(brush);
			/*DestroyWindow(GuiButtons.__HOME.BACKtoSTART);
			GuiButtons.__HOME.BACKtoSTART = CreateWindow(
				L"button",
				L"Back To Starter",
				WS_CHILD | BS_PUSHBUTTON | WS_VISIBLE | BS_FLAT | BS_NOTIFY | BS_MULTILINE,
				0,
				0,
				(int)(WindowWidth * 1 / 10),
				(int)(WindowHeight * 1 / 20),
				MainhWnd,
				NULL,
				NULL,
				NULL);
			ShowWindow(GuiButtons.__HOME.BACKtoSTART, SW_NORMAL);
			UpdateWindow(GuiButtons.__HOME.BACKtoSTART);
			*/
			}
		else {
		}
	}
	// 结束绘图并释放
	EndPaint(MainhWnd, &ps);
	BitBlt(MainhDC, 0, 0, WindowWidth, WindowHeight, PrevhDC, 0, 0, SRCCOPY);
	return;
	}

//
// 函数 gdiSetBackgroundPic()
// 
// 封装了设置背景图片的一系列操作，包括
// 从硬盘中加入指定图片；（名称）
// 加载到对应的坐标
//
void gdiSetBackgroundPic() {
	PrevhDC_bg = CreateCompatibleDC(PrevhDC);
	if (GuiRectangle_Present.right * 3 > GuiRectangle_Present.bottom * 4) {
		GuiBackground = (HBITMAP)LoadImage(NULL, L"bg.bmp", IMAGE_BITMAP, (int)(GuiRectangle_Present.right), (int)(GuiRectangle_Present.right * 3 / 4), LR_LOADFROMFILE);
		SelectObject(PrevhDC_bg, GuiBackground);
		BitBlt(PrevhDC, 0, (int)(GuiRectangle_Present.bottom / 2 - GuiRectangle_Present.right * 3 / 8), (int)(GuiRectangle_Present.right), (int)(GuiRectangle_Present.right * 3 / 4), PrevhDC_bg, 0, 0, SRCCOPY);
		//BitBlt(PrevhDC, (int)(WindowWidth / 2 - 1130*0.8), 0, 2000, 1500, PrevhDC_bg, 0, 0, SRCCOPY);
	}
	else {
		GuiBackground = (HBITMAP)LoadImage(NULL, L"bg.bmp", IMAGE_BITMAP, (int)(GuiRectangle_Present.bottom * 4 / 3), (int)(GuiRectangle_Present.bottom), LR_LOADFROMFILE);
		SelectObject(PrevhDC_bg, GuiBackground);
		BitBlt(PrevhDC, (int)(GuiRectangle_Present.right / 2 - GuiRectangle_Present.bottom * 2 / 3), 0, (int)(GuiRectangle_Present.bottom * 4 / 3), (int)(GuiRectangle_Present.bottom), PrevhDC_bg, 0, 0, SRCCOPY);
		//BitBlt(PrevhDC, (int)(WindowWidth / 2 - 1130*0.8), 0, 2000, 1500, PrevhDC_bg, 0, 0, SRCCOPY);
	}
	return;
}

//
// 函数 GetGuiRect()
// 
// 封装了获取GUI大小的函数，该函数
// 能够将GUI的大小储存到全局变量GuiRectangle_Present中
//
void GetGuiRect() {
	GetWindowRect(MainhWnd, &WindowRectangle_Present);
	GuiRectangle_Present.right = WindowRectangle_Present.right - WindowRectangle_Present.left;
	GuiRectangle_Present.bottom = WindowRectangle_Present.bottom - WindowRectangle_Present.top;
	return;
}


























		//--------------------------------------------------------------------------------------
		// 【Direct3D初始化四步曲之一，创接口】：创建Direct3D接口对象, 以便用该Direct3D对象创建Direct3D设备对象
		//--------------------------------------------------------------------------------------
		LPDIRECT3D9  pD3D = NULL; //Direct3D接口对象的创建
		if (NULL == (pD3D = Direct3DCreate9(D3D_SDK_VERSION))) //初始化Direct3D接口对象，并进行DirectX版本协商
			return E_FAIL;

		//--------------------------------------------------------------------------------------
		// 【Direct3D初始化四步曲之二,取信息】：获取硬件设备信息
		//--------------------------------------------------------------------------------------
		D3DCAPS9 caps; int vp = 0;
		if (FAILED(pD3D->GetDeviceCaps(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, &caps)))
		{
			return E_FAIL;
		}
		if (caps.DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)
			vp = D3DCREATE_HARDWARE_VERTEXPROCESSING;   //支持硬件顶点运算，我们就采用硬件顶点运算，妥妥的
		else
			vp = D3DCREATE_SOFTWARE_VERTEXPROCESSING; //不支持硬件顶点运算，无奈只好采用软件顶点运算

		//--------------------------------------------------------------------------------------
		// 【Direct3D初始化四步曲之三，填内容】：填充D3DPRESENT_PARAMETERS结构体
		//--------------------------------------------------------------------------------------
		D3DPRESENT_PARAMETERS d3dpp;
		ZeroMemory(&d3dpp, sizeof(d3dpp));
		d3dpp.BackBufferWidth = GuiRectangle_Present.right;
		d3dpp.BackBufferHeight = GuiRectangle_Present.bottom;
		d3dpp.BackBufferFormat = D3DFMT_A8R8G8B8;
		d3dpp.BackBufferCount = 1;
		d3dpp.MultiSampleType = D3DMULTISAMPLE_NONE;
		d3dpp.MultiSampleQuality = 0;
		d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;
		d3dpp.hDeviceWindow = hwnd;
		d3dpp.Windowed = true;
		d3dpp.EnableAutoDepthStencil = true;
		d3dpp.AutoDepthStencilFormat = D3DFMT_D24S8;
		d3dpp.Flags = 0;
		d3dpp.FullScreen_RefreshRateInHz = 0;
		d3dpp.PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;

		//--------------------------------------------------------------------------------------
		// 【Direct3D初始化四步曲之四，创设备】：创建Direct3D设备接口
		//--------------------------------------------------------------------------------------
		if (FAILED(pD3D->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hwnd, vp, &d3dpp, &g_pd3dDevice)))
			return E_FAIL;

		SAFE_RELEASE(pD3D) //LPDIRECT3D9接口对象的使命完成，我们将其释放掉

			if (!(S_OK == ObjectsInit(hwnd))) return E_FAIL;     //调用一次Objects_Init，进行渲染资源的初始化
		return S_OK;
	}
